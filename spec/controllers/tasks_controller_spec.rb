require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TasksController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Task. As you add validations to Task, be sure to
  # adjust the attributes here as well.
  let(:user) {
    create(:user)
  }

  let(:task_template) {
    create(:task_template, user_id: user.id)
  }

  let(:task_set) {
    create(:task_set, task_template_id: task_template.id)
  }

  let!(:assign) {
    create(:assign, task_set_id: task_set.id, name: user.username)
  }
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TasksController. Be sure to keep this updated too.
  let(:valid_session) { sign_in user }

  describe "GET #index" do
    it "assigns all tasks as @tasks" do
      get :index, {}, valid_session
      expect(assigns(:tasks)).to eq(task_set.tasks)
    end
  end

  describe "GET #show" do
    let(:task) { task_set.tasks.first }
    it "assigns the requested task as @task" do
      get :show, {:id => task.to_param}, valid_session
      expect(assigns(:task)).to eq(task)
    end

    it "assigns a new task result as @task_result" do
      get :show, {:id => task.to_param}, valid_session
      expect(assigns(:task_result)).to be_a_new(TaskResult)
    end

    context "with a task result created" do
      let!(:task_result) { create(:task_result, task_id: task.id, user_id: user.id) }
      it "assigns the task result as @task_result" do
        get :show, {:id => task.to_param}, valid_session
        expect(assigns(:task_result)).to eq(task_result)
      end
    end
  end

  describe "GET #new" do
    it "is not found" do
      expect{get :new, {}, valid_session}.to\
        raise_error(ActionController::UrlGenerationError)
    end
  end

  describe "GET #edit" do
    let(:task) { task_set.tasks.first }
    it "is not found" do
      expect{get :edit, {:id => task.to_param}, valid_session}.to\
        raise_error(ActionController::UrlGenerationError)
    end
  end

  describe "POST #create" do
    it "is not found" do
      expect{get :create, {task: {}}, valid_session}.to\
        raise_error(ActionController::UrlGenerationError)
    end
  end

  describe "PUT #update" do
    let(:task) { task_set.tasks.first }
    let(:another_task_set) { create(:task_set, task_template_id: task_template.id) }
    let(:new_attributes) {
      attributes_for(:task, task_set_id: another_task_set.id)
    }
    it "is not found" do
      expect{put :update, {:id => task.to_param, 
        task: new_attributes}, valid_session}.to\
        raise_error(ActionController::UrlGenerationError)
    end
  end

  describe "DELETE #destroy" do
    let(:task) { task_set.tasks.first }
    it "is not found" do
      expect{delete :destroy, {:id => task.to_param}, valid_session}.to\
        raise_error(ActionController::UrlGenerationError)
    end
  end

end
