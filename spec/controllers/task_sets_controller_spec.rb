require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TaskSetsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # TaskSet. As you add validations to TaskSet, be sure to
  # adjust the attributes here as well.
  let(:user) {
    create(:user)
  }

  let(:task_template) {
    create(:task_template, user_id: user.id)
  }

  let(:valid_attributes) {
    attributes_for(:task_set, task_template_id: task_template.id)
  }

  let(:invalid_attributes) {
    attributes_for(:task_set, task_template_id: task_template.id,
      label: "")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TaskSetsController. Be sure to keep this updated too.
  before do
    sign_in user
  end

  describe "GET #index" do
    it "assigns all task_sets as @task_sets" do
      task_set = TaskSet.create! valid_attributes
      get :index, params: {task_template_id: task_template.id}
      expect(assigns(:task_sets)).to eq([task_set])
    end
  end

  describe "GET #show" do
    it "assigns the requested task_set as @task_set" do
      task_set = TaskSet.create! valid_attributes
      get :show, params: {:id => task_set.to_param}
      expect(assigns(:task_set)).to eq(task_set)
    end
  end

  describe "GET #new" do
    it "assigns a new task_set as @task_set" do
      get :new, params: {task_template_id: task_template.id}
      expect(assigns(:task_set)).to be_a_new(TaskSet)
    end
  end

  describe "GET #edit" do
    it "assigns the requested task_set as @task_set" do
      task_set = TaskSet.create! valid_attributes
      get :edit, params: {:id => task_set.to_param}
      expect(assigns(:task_set)).to eq(task_set)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new TaskSet" do
        expect {
          post :create, params: {task_template_id: task_template.id,
            :task_set => valid_attributes}
        }.to change(TaskSet, :count).by(1)
      end

      it "assigns a newly created task_set as @task_set" do
        post :create, params: {task_template_id: task_template.id,
          :task_set => valid_attributes}
        expect(assigns(:task_set)).to be_a(TaskSet)
        expect(assigns(:task_set)).to be_persisted
      end

      it "redirects to the created task_set" do
        post :create, params: {task_template_id: task_template.id,
          :task_set => valid_attributes}
        expect(response).to redirect_to(task_template_task_sets_path(task_template))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved task_set as @task_set" do
        post :create, params: {task_template_id: task_template.id,
          :task_set => invalid_attributes}
        expect(assigns(:task_set)).to be_a_new(TaskSet)
      end

      it "re-renders the 'new' template" do
        post :create, params: {task_template_id: task_template.id,
          :task_set => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        attributes_for(:task_set, task_template_id: task_template.id,
          label: Faker::Job.title)
      }

      it "updates the requested task_set" do
        task_set = TaskSet.create! valid_attributes
        put :update, params: {:id => task_set.to_param, :task_set => new_attributes}
        expect{ task_set.reload }.to change{ task_set.label }.from(task_set.label).to(new_attributes[:label])
      end

      it "assigns the requested task_set as @task_set" do
        task_set = TaskSet.create! valid_attributes
        put :update, params: {:id => task_set.to_param, :task_set => new_attributes}
        expect(assigns(:task_set)).to eq(task_set)
      end

      it "redirects to the task_set" do
        task_set = TaskSet.create! valid_attributes
        put :update, params: {:id => task_set.to_param, :task_set => new_attributes}
        expect(response).to redirect_to(task_template_task_sets_path(task_template))
      end
    end

    context "with invalid params" do
      it "assigns the task_set as @task_set" do
        task_set = TaskSet.create! valid_attributes
        put :update, params: {:id => task_set.to_param, :task_set => invalid_attributes}
        expect(assigns(:task_set)).to eq(task_set)
      end

      it "re-renders the 'edit' template" do
        task_set = TaskSet.create! valid_attributes
        put :update, params: {:id => task_set.to_param, :task_set => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested task_set" do
      task_set = TaskSet.create! valid_attributes
      expect {
        delete :destroy, params: {:id => task_set.to_param}
      }.to change(TaskSet, :count).by(-1)
    end

    it "redirects to the task_sets list" do
      task_set = TaskSet.create! valid_attributes
      delete :destroy, params: {:id => task_set.to_param}
      expect(response).to redirect_to(task_template_task_sets_path(task_template))
    end
  end

end
